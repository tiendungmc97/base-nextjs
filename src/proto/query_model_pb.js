// source: query_model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Action', null, global);
goog.exportSymbol('proto.BuyStatus', null, global);
goog.exportSymbol('proto.Position', null, global);
goog.exportSymbol('proto.PositionStatus', null, global);
goog.exportSymbol('proto.SellStatus', null, global);
goog.exportSymbol('proto.Side', null, global);
goog.exportSymbol('proto.Symbol', null, global);
goog.exportSymbol('proto.SymbolSetting', null, global);
goog.exportSymbol('proto.SymbolStatus', null, global);
goog.exportSymbol('proto.TickerStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Symbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Symbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Symbol.displayName = 'proto.Symbol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SymbolSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SymbolSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SymbolSetting.displayName = 'proto.SymbolSetting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Position.displayName = 'proto.Position';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Symbol.prototype.toObject = function(opt_includeInstance) {
  return proto.Symbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Symbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Symbol.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbolCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbolName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sellStatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    buyStatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    spread: jspb.Message.getFieldWithDefault(msg, 5, ""),
    aggregation: jspb.Message.getFieldWithDefault(msg, 6, ""),
    symbolStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tickSize: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Symbol}
 */
proto.Symbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Symbol;
  return proto.Symbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Symbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Symbol}
 */
proto.Symbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolName(value);
      break;
    case 3:
      var value = /** @type {!proto.SellStatus} */ (reader.readEnum());
      msg.setSellStatus(value);
      break;
    case 4:
      var value = /** @type {!proto.BuyStatus} */ (reader.readEnum());
      msg.setBuyStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpread(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggregation(value);
      break;
    case 7:
      var value = /** @type {!proto.SymbolStatus} */ (reader.readEnum());
      msg.setSymbolStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTickSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Symbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Symbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Symbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Symbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbolCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbolName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSellStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getBuyStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSpread();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAggregation();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSymbolStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTickSize();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string symbol_code = 1;
 * @return {string}
 */
proto.Symbol.prototype.getSymbolCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Symbol} returns this
 */
proto.Symbol.prototype.setSymbolCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol_name = 2;
 * @return {string}
 */
proto.Symbol.prototype.getSymbolName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Symbol} returns this
 */
proto.Symbol.prototype.setSymbolName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SellStatus sell_status = 3;
 * @return {!proto.SellStatus}
 */
proto.Symbol.prototype.getSellStatus = function() {
  return /** @type {!proto.SellStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.SellStatus} value
 * @return {!proto.Symbol} returns this
 */
proto.Symbol.prototype.setSellStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional BuyStatus buy_status = 4;
 * @return {!proto.BuyStatus}
 */
proto.Symbol.prototype.getBuyStatus = function() {
  return /** @type {!proto.BuyStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.BuyStatus} value
 * @return {!proto.Symbol} returns this
 */
proto.Symbol.prototype.setBuyStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string spread = 5;
 * @return {string}
 */
proto.Symbol.prototype.getSpread = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Symbol} returns this
 */
proto.Symbol.prototype.setSpread = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string aggregation = 6;
 * @return {string}
 */
proto.Symbol.prototype.getAggregation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Symbol} returns this
 */
proto.Symbol.prototype.setAggregation = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional SymbolStatus symbol_status = 7;
 * @return {!proto.SymbolStatus}
 */
proto.Symbol.prototype.getSymbolStatus = function() {
  return /** @type {!proto.SymbolStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.SymbolStatus} value
 * @return {!proto.Symbol} returns this
 */
proto.Symbol.prototype.setSymbolStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string tick_size = 8;
 * @return {string}
 */
proto.Symbol.prototype.getTickSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Symbol} returns this
 */
proto.Symbol.prototype.setTickSize = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SymbolSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.SymbolSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SymbolSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SymbolSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbolCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sellStatus: jspb.Message.getFieldWithDefault(msg, 2, 0),
    buyStatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    spread: jspb.Message.getFieldWithDefault(msg, 4, ""),
    aggregation: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SymbolSetting}
 */
proto.SymbolSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SymbolSetting;
  return proto.SymbolSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SymbolSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SymbolSetting}
 */
proto.SymbolSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolCode(value);
      break;
    case 2:
      var value = /** @type {!proto.SellStatus} */ (reader.readEnum());
      msg.setSellStatus(value);
      break;
    case 3:
      var value = /** @type {!proto.BuyStatus} */ (reader.readEnum());
      msg.setBuyStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpread(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggregation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SymbolSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SymbolSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SymbolSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SymbolSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbolCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSellStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBuyStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSpread();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAggregation();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string symbol_code = 1;
 * @return {string}
 */
proto.SymbolSetting.prototype.getSymbolCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SymbolSetting} returns this
 */
proto.SymbolSetting.prototype.setSymbolCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SellStatus sell_status = 2;
 * @return {!proto.SellStatus}
 */
proto.SymbolSetting.prototype.getSellStatus = function() {
  return /** @type {!proto.SellStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.SellStatus} value
 * @return {!proto.SymbolSetting} returns this
 */
proto.SymbolSetting.prototype.setSellStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional BuyStatus buy_status = 3;
 * @return {!proto.BuyStatus}
 */
proto.SymbolSetting.prototype.getBuyStatus = function() {
  return /** @type {!proto.BuyStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.BuyStatus} value
 * @return {!proto.SymbolSetting} returns this
 */
proto.SymbolSetting.prototype.setBuyStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string spread = 4;
 * @return {string}
 */
proto.SymbolSetting.prototype.getSpread = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.SymbolSetting} returns this
 */
proto.SymbolSetting.prototype.setSpread = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string aggregation = 5;
 * @return {string}
 */
proto.SymbolSetting.prototype.getAggregation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.SymbolSetting} returns this
 */
proto.SymbolSetting.prototype.setAggregation = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbolCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    side: jspb.Message.getFieldWithDefault(msg, 3, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 4, ""),
    price: jspb.Message.getFieldWithDefault(msg, 5, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    createTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    updateTime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    positionStatus: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Position}
 */
proto.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Position;
  return proto.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Position}
 */
proto.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolCode(value);
      break;
    case 3:
      var value = /** @type {!proto.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateTime(value);
      break;
    case 9:
      var value = /** @type {!proto.PositionStatus} */ (reader.readEnum());
      msg.setPositionStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbolCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getUpdateTime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getPositionStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Position.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol_code = 2;
 * @return {string}
 */
proto.Position.prototype.getSymbolCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setSymbolCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Side side = 3;
 * @return {!proto.Side}
 */
proto.Position.prototype.getSide = function() {
  return /** @type {!proto.Side} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Side} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.Position.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string price = 5;
 * @return {string}
 */
proto.Position.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 uid = 6;
 * @return {number}
 */
proto.Position.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 create_time = 7;
 * @return {number}
 */
proto.Position.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 update_time = 8;
 * @return {number}
 */
proto.Position.prototype.getUpdateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setUpdateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional PositionStatus position_status = 9;
 * @return {!proto.PositionStatus}
 */
proto.Position.prototype.getPositionStatus = function() {
  return /** @type {!proto.PositionStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.PositionStatus} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setPositionStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * @enum {number}
 */
proto.Side = {
  SIDE_NONE: 0,
  SIDE_BUY: 1,
  SIDE_SELL: 2
};

/**
 * @enum {number}
 */
proto.SymbolStatus = {
  SYMBOL_NONE: 0,
  SYMBOL_ACTIVE: 1,
  SYMBOL_DEACTIVE: 2
};

/**
 * @enum {number}
 */
proto.SellStatus = {
  SELL_STATUS_NONE: 0,
  SELL_STATUS_ACTIVE: 1,
  SELL_STATUS_DEACTIVE: 2
};

/**
 * @enum {number}
 */
proto.BuyStatus = {
  BUY_STATUS_NONE: 0,
  BUY_STATUS_ACTIVE: 1,
  BUY_STATUS_DEACTIVE: 2
};

/**
 * @enum {number}
 */
proto.Action = {
  MODE_NONE: 0,
  MODE_NEW: 1,
  MODE_UPDATE: 2,
  MODE_DELETE: 3
};

/**
 * @enum {number}
 */
proto.PositionStatus = {
  POSITION_STATUS_NONE: 0,
  POSITION_STATUS_PENDING: 1
};

/**
 * @enum {number}
 */
proto.TickerStatus = {
  TICKER_STATUS_NONE: 0,
  TICKER_STATUS_ACTIVE: 1,
  TICKER_STATUS_DEACTIVE: 2
};

goog.object.extend(exports, proto);
